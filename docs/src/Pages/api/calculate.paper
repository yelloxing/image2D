<template>
    <div class='api-view'>
        <p>
            绘图的时候难免要进行一些比较复杂的计算，这里根据使用场景不同，提供了几种常见的辅助计算。
        </p>
        <h2 id='fixed-dot'>
            二维坐标变换
        </h2>
        <p>
            简单坐标变换分为二类：独立的变换和变换对象dot。
        </p>
        <h4>
            独立的变换
        </h4>
        <p>
            点（x,y）围绕中心（cx,cy）旋转deg度：
        </p>
        <pre q-code>
$$.rotate(cx, cy, deg, x, y);
            </pre>
        <p>
            点（x,y）沿着向量（ax,ay）方向移动距离d：
        </p>
        <pre q-code>
$$.move(ax, ay, d, x, y);
            </pre>
        <p>
            点（x,y）围绕中心（cx,cy）缩放times倍：
        </p>
        <pre q-code>
$$.scale(cx, cy, times, x, y);
            </pre>
        <h4>
            变换对象
        </h4>
        <p>
            dot表示一个会移动的二维点，内部维护着「前进方向向量」、「当前位置」和「中心坐标」。首先，我们来看看如何获取一个dot实例：
        </p>
        <pre q-code>
var dot=$$.dot({
    // 前进方向、中心坐标和当前位置（都可选，下列是缺省值）
    d: [1, 1],c: [0, 0],p: [0, 0]
});
            </pre>
        <p>
            下列是一些变换方法，通过这些方法可以控制点dot的坐标改变或获取当前坐标。
        </p>
        <p>
            前进方向以当前位置为中心，旋转deg度（注意，改变的是前进方向，不是当前坐标）：
        </p>
        <pre q-code>
dot.rotate(deg);
            </pre>
        <p>
            沿着当前前进方向前进d：
        </p>
        <pre q-code>
dot.move(d);
            </pre>
        <p>
            围绕中心坐标缩放：
        </p>
        <pre q-code>
dot.scale(times);
            </pre>
        <p>
            返回当前位置：
        </p>
        <pre q-code>
var p=dot.value();
            </pre>
        <h2 id='fixed-matrix4'>
            矩阵坐标变换
        </h2>
        <p>
            Matrix4是一个列主序存储的4x4矩阵，使用该矩阵对象的第一步是像下面这样获取该对象，参数initMatrix4可选，你可以传递一个初始化矩阵或默认采用单位矩阵E初始化。
        </p>
        <pre q-code>
var matrix4=$$.Matrix4(initMatrix4);
            </pre>
        <p>
            和前面的二维坐标变换不同的是，变换不是直接作用在具体的点上，而是先求解出一系列变换的变换矩阵，最后应用在具体点上。
        </p>
        <h4>
            基本运算
        </h4>
        <p>
            返回matrix4当前记录的内部矩阵：
        </p>
        <pre q-code>
var val=matrix4.value();
            </pre>
        <p>
            比如采用默认值初始化的矩阵对象，打印结果如下：
        </p>
        <pre q-code>
(16) [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]
            </pre>
        <p>
            二个矩阵相乘：
        </p>
        <pre q-code>
matrix4.multiply(newMatrix4[, flag]);
            </pre>
        <p>
            第一个参数应该是一个和value打印出来一样格式的一维数组，列主序存储。flag默认false，可不传，表示左乘，即newMatrix4 × matrix4，如果设置flag为true，表示右乘。
        </p>
        <p>
            把变换矩阵作用在具体的点上：
        </p>
        <pre q-code>
var position=matrix4.use(x, y, z, w);
            </pre>
        <p>
            矩阵的目的是对坐标进行变换，use方法返回齐次坐标(x, y, z, w)经过matrix4矩阵变换后的坐标值。其中z和w可以不传递，默认0和1，返回的坐标值是一个齐次坐标。
        </p>
        <h4>
            坐标变换
        </h4>
        <p>
            沿着向量(a, b, c)方向移动距离dis（其中c可以不传，默认0）：
        </p>
        <pre q-code>
matrix4.move(dis, a, b, c);
            </pre>
        <p>
            以点(cx, cy, cz)为中心，分别在x、y和z方向上缩放xTimes、yTimes和zTimes倍（其中cx、cy和cz都可以不传递，默认0）：
        </p>
        <pre q-code>
matrix4.scale(xTimes, yTimes, zTimes, cx, cy, cz);
            </pre>
        <p>
            围绕射线(a1, b1, c1) -> (a2, b2, c2)旋转deg度（方向由右手法则确定）：
        </p>
        <pre q-code>
matrix4.rotate(deg, a1, b1, c1, a2, b2, c2);
            </pre>
        <p>
            a1、b1、c1、a2、b2和c2这6个值在设置的时候，不是一定需要全部设置，还有以下可选：
        </p>
        <ul>
            <li>只设置了a1和b1，表示在xoy平面围绕（a1, b1）旋转。</li>
            <li>只设置三个点(设置不足六个点都认为只设置了三个点)，表示围绕从原点出发的射线旋转。</li>
        </ul>
        <h2 id='fixed-interpolation'>
            曲线插值
        </h2>
        <p>
            给定若干个不连续的点，在这些点之间插入足够的点，来使得这些点连接起来是一个平滑的曲线。求解在何处插入新的点就是这里需要解决的问题。
        </p>
        <h4>
            Cardinal
        </h4>
        <p>
            用一个N次多项式函数求解出若干个点的插值函数是一个可行的方法，不过在一次插值中，当插值点数量增加的时候，N越来越大，很容易带来收敛困难，也就是Runge现象。
        </p>
        <p>
            因此在这里，我们内部选择三次插值Hermite法（N=3）。在需要插值的点的个数比较多的时候，选择分段求解，也就是Cardinal插值法。
        </p>
        <p>
            首先，我们需要获取插值对象实例：
        </p>
        <pre q-code>
var cardinal=$$.cardinal();
            </pre>
        <p>
            设置张弛系数(应该在点的位置设置前设置)：
        </p>
        <pre q-code>
cardinal.setT(t);
            </pre>
        <p>
            该参数用于调整曲线走势，默认数值t=0，分水岭t=-1，|t-(-1)|的值越大，曲线走势调整的越严重。
        </p>
        <p>
            设置点的位置：
        </p>
        <pre q-code>
cardinal.setP([[x,y],[x,y],...]);
            </pre>
        <p>
            经过上面的设置，插值对象就可以求值了。比如x=a，其中a在需要插值的点之间（边界也可以），你可以这样求解出y值：
        </p>
        <pre q-code>
var y=cardinal(a);
            </pre>
        <h2 id='fixed-layout'>
            布局
        </h2>
        <p>
            在绘制一些常见图形的时候，比如关系图，单个结点或连线并不难，麻烦的是位置的计算等，和图形模块不同，布局就是专门计算一些特殊图形位置的模块，用一句通俗的话说就是：决定什么元素绘制在哪里。因此，布局应该和具体的绘图方法无关，她只关心位置的计算。
        </p>
        <h4 id='fixed-treeLayout'>
            树布局
        </h4>
        <p>
            调用treeLayout方法，传递配置config（后续也可以提供config方法来修改配置）就可以获取树布局实例：
        </p>
        <pre q-code>
var treeLayout=$$.treeLayout(config);
            </pre>
        <p>
            config是一个键值对格式的配置json，由于原始数据格式不一定，你需要传递数据格式的配置（必须的，可选部分在后面说明）：
        </p>
        <ul>
            <li>"root":function(initTree){ /*返回根结点*/ }</li>
            <li>"id":function(treedata){ /*返回id*/ }</li>
            <li>"child":function(parentTree, initTree){ /*返回孩子结点*/ }</li>
        </ul>
        <p>
            你还可以配置绘图方法（非必输），因为布局并不知道如何绘制：
        </p>
        <pre q-code>
treeLayout.drawer(function(data){ /*绘制*/ });
            </pre>
        <p>
            data是计算后带有结点坐标的数据，格式如下：
        </p>
        <pre q-code>
{node: {
    "XXX":{
        children: []
        data: any
        id: string||number
        left: number
        pid: any
        deep: number
        top: number
    },
    ...
}, root: string||number, size: number, deep: number}
            </pre>
        <p>
            node记录的是每个结点的信息，每个结点中的left和top就是该结点应该绘制的位置，data是结点的原始数据，deep表示结点层次（从0开始）。
        </p>
        <p>
            上面说明的都配置好以后，就可以启动布局计算并绘图了：
        </p>
        <pre q-code>
// 如果通过drawer方法配置了绘图方法这里就返回布局对象并启动绘图
// 否则返回计算后的数据
// (所有布局都一样)
treeLayout(data);
            </pre>
        <h6 id='fixed-treeLayout-basic'>
            基本模型
        </h6>
        <div class="layout-tree_design"></div>
        <p>
            可能你已经发现了，树图分为很多种（圆形树，倒树等），上面并没有配置这些信息（有接口提供配置，稍后说明）。是的，没有配置的时候，默认选择的是基本模型，那什么是基本模型？
        </p>
        <p>
            右图是某个具体例子的基本模型，其中每个红色矩形都是一个1x1的正方形，坐标原心位于左上角绿色顶点。
        </p>
        <pre q-code>
"油画":{
    children: [];
    data: (2) ["油画", "手绘"];
    id: "油画";
    left: 1.5;
    deep: 1;
    pid: "手绘";
    show: true;
    top: 1.5
}
            </pre>
        <p>
            主要看看top和left，和右边的图对应，是不是很清晰了。tree布局的核心位置计算就是把每个结点看成一个1x1的正方形，别的具体树图都是从此出发计算得出的，这就是基本模型。
        </p>
        <h6 id='fixed-treeLayout-config'>
            配置模型
        </h6>
        <p>
            虽然从基本模型出发计算具体的树图已经很容易了，不过为了方便，依旧对常见的树图提供了下列配置选项：
        </p>
        <ul>
            <li>type:LR|RL|BT|TB|circle，配置树图的类型（默认原始模型，会忽略下列全部设置）。</li>
            <li>width,height:number，设置树图的宽和高（如果类型是LR|RL|BT|TB需要设置）。</li>
            <li>cx,cy:number，设置圆心（如果类型是circle需要设置）。</li>
            <li>radius:number，设置树图半径（如果类型是circle需要设置）。</li>
            <li>begin-deg,deg:number，开始和跨越弧度（可选，如果类型是circle设置该参数有效）。</li>
        </ul>
        <h4 id='fixed-pieLayout'>
            饼布局
        </h4>
        <p>
            调用pieLayout方法，传递配置config（后续也可以提供config方法来修改配置）就可以获取饼布局实例：
        </p>
        <pre q-code>
var pieLayout=$$.pieLayout(config);
            </pre>
        <p>
            config是一个键值对格式的配置json，由于原始数据格式不一定，你需要传递数据格式的配置：
        </p>
        <ul>
            <li>"value":function(data, key, index){ /*返回结点的价值，必须是一个数字*/ }</li>
            <li>"begin-deg":整个饼图的起点弧度</li>
            <li>"deg":饼图的跨越弧度</li>
        </ul>
        <p class="warn">
            value是必须的，begin-deg和deg都是可选的，有默认值，分别为：-Math.PI / 2和Math.PI * 2。
        </p>
        <p>
            你还可以配置绘图方法（非必输），因为布局并不知道如何绘制：
        </p>
        <pre q-code>
pieLayout.drawer(function(data){ /*绘制*/ });
            </pre>
        <p>
            data是计算后带有结点坐标的数据，格式如下：
        </p>
        <pre q-code>
[{
    beginDeg:number
    data:any
    deg:number
    dots:Array
    index:number
    key:string
    percent:number
    value:number
},{...},...]
            </pre>
        <p>
            可以看出来数据是一个数组，我们列出其中一项（一个饼图是由一个个弧组成的，这就是其中一个弧）说明具体有哪些。先来说明几个基本的，特殊的需要配合额外配置才有意义。
        </p>
        <p>
            beginDeg和deg分别表示这个弧的起点弧度和跨越弧度，data是原始数据，index、key、value分别表示该项的序号、键和计算后的价值，percent表示该项占比（单位%）。
        </p>
        <h6>
            补充计算
        </h6>
        <p>
            我们看到上面没有对dots进行解释，为了使用这项，我们需要额外配置三项：
        </p>
        <pre q-code>
pieLayout.config({
    // 饼图中一个瓣的中心参考半径，可以有多个[可选]
    "radius": [number, ...],
    // 饼图中心坐标
    "cx": number,
    "cy": number
});
            </pre>
        <p>
            饼图绘制的时候，除了绘制各个弧以外，有时候我们希望添加提示文字，用折线和弧对应起来，radius是一个数组，每个项代表一个半径，我们会计算每个半径对应的小弧中心坐标，最终保存的位置就是dots。
        </p>
        <h2 id='fixed-map'>
            地图坐标映射
        </h2>
        <p>
            比如绘制一个区域，我们拿到的区域信息大部分情况下都是一堆经纬度的值，绘制的时候需要转成xOy坐标，让我们先来获取一个映射对象：
        </p>
        <pre q-code>
var map = $$.map(config);
            </pre>
        <p>
            可以看到，建立地图对象的时候需要传递配置config（后续也可以提供config方法来修改配置）来确定采用何种映射算法，不同的映射算法需要配置的参数不一样，这个我们在介绍具体的映射算法的时候再说。
        </p>
        <p>
            到这里，映射对象就有了，然后你就可以直接调用映射对象获取一个经纬度对应的坐标：
        </p>
        <pre q-code>
// 特别需要注意，计算出来的位置是偏离中心点的距离
var d_xyz=map(longitude, latitude);
            </pre>
        <p>
            怎么样，是不是很简单。无论哪种投影，都是把地球看成一个半径为100px的圆球，然后在此基础上计算出经纬度分别为longitude和latitude的点对应的（dx, dy, dz)坐标值。
        </p>
        <p>
            config配置项中有几项是所有投影共有的：
        </p>
        <pre q-code>
map.config({

    // 设置缩放比例，默认1
    scale:number,

    // 设置旋转中心，你可以把你绘制的部分的中心的经纬度设置为中心，默认[107, 36]
    center:[longitude, latitude]

});
            </pre>
        <p>
            接下来，我们来看看具体的投影算法：
        </p>
        <h4 id='fixed-map-eoap'>
            等角斜方位投影
        </h4>
        <p>
            这种投影会保持角度正确，也就是没有角度变形，但面积变形较大。
        </p>
        <pre q-code>
map.config({

    // 表示使用「等角斜方位投影」
    type:'eoap'

});
            </pre>
    </div>
</template>
<script>
    import changeActive from '../../Service/changeActive.js';
    import fixedScroll from '../../Service/fixedScroll.js';
    export default {
        created() {
            changeActive('menu-2', 'calculate');
        },
        mounted() {
            fixedScroll();
        }
    };
</script>
<style>
    .layout-tree_design {
        background-image: url("../../assets/layout-tree_design.png");
        height: 3.2rem;
        background-repeat: no-repeat;
        background-position: left center;
        background-size: auto 100%;
    }
</style>
