<template>
    <div class='api-view'>
        <p>
            因为绘制的时候，比如canvas2D没有图层，某个数据改变可能就意味着需要全部重新绘制等，基于这些考虑，在这一章，对前面进行必要的补充。
        </p>
        <h2 id='fixed-layer'>
            位图图层
        </h2>
        <p>
            首先需要明确，图层服务的对象是canvas2D，svg某种意义上天生具有图层，不需要额外设计。让我们首先看看如何获取一个图层对象：
        </p>
        <div ui-copy>
            <pre class="prettyprint">
var layer=imageObject.layer();
            </pre>
        </div>
        <p>
            这里的图层可以类比photoshop的图层去理解，我们提供了几个类似的方法来帮助使用图层对象。
        </p>
        <p>
            图层对象管理着图层，通过传递id可以获取对应图层的画笔，如果该图层不存在会自动创建（这里的画笔就是canvas2D画笔）：
        </p>
        <div ui-copy>
            <pre class="prettyprint">
var painter=layer.painter(id);
            </pre>
        </div>
        <p>
            删除指定图层：
        </p>
        <div ui-copy>
            <pre class="prettyprint">
layer.delete(id);
            </pre>
        </div>
        <p>
            图层中的内容不会显示在画布上，为了显示在画布上，需要手动更新：
        </p>
        <div ui-copy>
            <pre class="prettyprint">
layer.update();
            </pre>
        </div>
        <p>
            隐藏图层：
        </p>
        <div ui-copy>
            <pre class="prettyprint">
layer.hidden(id);
            </pre>
        </div>
        <p>
            显示图层：
        </p>
        <div ui-copy>
            <pre class="prettyprint">
layer.show(id);
            </pre>
        </div>
        <p class="warn">图层的创建越晚离眼睛距离越近。</p>
        <h2 id='fixed-animation'>
            动画或定时轮询
        </h2>
        <p>
            绘图的时候，为了实现动画效果，你除了可以使用画布或css天然的动画相关属性，还可以使用ES绘制每一帧的方式实现。为了方便你绘制我们提供了下面方法：
        </p>
        <div ui-copy>
            <pre class="prettyprint">
var stop=$$.animation(function(deep){
    // deep取值0-1，表示动画进度
}, speeds, function(deep){
    // deep和上面一样，提供的原因是有时候结束回调是stop方法触发而不是动画结束了
},timing);
            </pre>
        </div>
        <p>
            该方法有四个参数：分别表示画帧方法、动画时长、动画结束回调和进度控制参数（动画时长单位毫秒，最后三个均可选）。
        </p>
        <p>
            其中timing可以为字符串或数组，字符串可选参数有："ease"、"ease-in"、"ease-in-out"、"ease-out"和"linear"（默认值），值的意义和css中的属性
            transition-timing-function 基本一致，数组的话也是和这个属性保持一致，长度为4。
        </p>
        <p>
            如果你希望动画立刻结束，可以调用下面的方法强行提前停止：
        </p>
        <div ui-copy>
            <pre class="prettyprint">
stop();
            </pre>
        </div>
        <h2 id='fixed-colors'>
            颜色计算相关方法
        </h2>
        <p>
            给定任意一个合法的css颜色字符串，把颜色统一转变成rgba格式，返回一个数组[r,g,b,a]：
        </p>
        <div ui-copy>
            <pre class="prettyprint">
var rgbaArray=$$.formatColor(colorString);
            </pre>
        </div>
        <p>
            传递需要的颜色个数，返回一组随机色彩：
        </p>
        <div ui-copy>
            <pre class="prettyprint">
// alpha可选，取值是0-1，表示颜色透明度
var colors=$$.getRandomColors(number, alpha);
            </pre>
        </div>
        <p>
            传递需要的颜色个数，返回一组循环色彩：
        </p>
        <div ui-copy>
            <pre class="prettyprint">
// alpha可选，取值是0-1，表示颜色透明度
var colors=$$.getLoopColors(number, alpha);
            </pre>
        </div>
        <h2 id='fixed-ruler'>
            刻度尺辅助计算
        </h2>
        <div ui-copy>
            <pre class='prettyprint'>
// 分别表示最大值，最小值和间隔数
var rulerData = $$.ruler(maxValue, minValue, number);
            </pre>
        </div>
        <div ui-copy>
            <pre class="prettyprint">
rulerData = {
    min: number, // 最小值
    max: number , // 最大值
    distance: number , // 步进
    num: number // 间隔数
    ruler: Array<number> // 刻度数数组
};
            </pre>
        </div>
        <p>
                返回的数据格式如下：
        </p>
        <p class="warn">
                温馨提示：传递的间隔数对于最终计算只是作为一个参考，实际的间隔数以返回的结果为准。
        </p>
    </div>
</template>
<script>
    import changeActive from '../../Service/changeActive.js';
    import fixedScroll from '../../Service/fixedScroll.js';
    export default {
        created() {
            changeActive('menu-2', 'tool');
        },
        mounted() {
            prettyPrint();
            fixedScroll();
        }
    };
</script>
