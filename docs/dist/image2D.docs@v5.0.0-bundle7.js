(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{23:function(a,e,p){"use strict";var r=p(24),i=p.n(r);e.a=function(a,e){i()("."+a).attr("active","no"),i()("."+a+"."+e).attr("active","yes")}},25:function(a,e,p){"use strict";var r=p(24),i=p.n(r);e.a=function(a,e){e=e||0,a=a||document.documentElement;var p=function(){var a=window.location.href.split("?")[1]||"";if(""==a)return{};var e=a.split("&"),p={};return e.forEach((function(a){var e=a.split("=");p[e[0]]=e[1]})),p}().fixed;if(p){var r=i()("#fixed-"+p);if(r.length>0){var t=r[0].offsetTop-e,c=a.scrollTop||0;i.a.animation((function(e){a.scrollTop=(t-c)*e+c}),500,(function(){a.scrollTop=t}))}}else a.scrollTop=0}},43:function(a,e,p){var r=p(44);"string"==typeof r&&(r=[[a.i,r,""]]),r.locals&&(a.exports=r.locals);(0,p(1).default)("data-quickpaper-b83e9852",r,!0)},44:function(a,e,p){(a.exports=p(0)(!1)).push([a.i,"",""])},64:function(a,e,p){"use strict";p.r(e);var r=p(23),i=p(25),t={created:function(){Object(r.a)("menu-2","tool")},mounted:function(){Object(i.a)()}};p(43);t.render=function(a){return a("div",{quickpaper:"","data-quickpaper-b83e9852":""},[a("div",{class:"api-view","data-quickpaper-b83e9852":""},[a("p",{"data-quickpaper-b83e9852":""},["因为绘制的时候，比如canvas2D没有图层，某个数据改变可能就意味着需要全部重新绘制等，基于这些考虑，在这一章，对前面进行必要的补充。"]),a("h2",{id:"fixed-layer","data-quickpaper-b83e9852":""},["位图图层"]),a("p",{"data-quickpaper-b83e9852":""},["首先需要明确，图层服务的对象是canvas2D，svg某种意义上天生具有图层，不需要额外设计。让我们首先看看如何获取一个图层对象："]),a("pre",{"q-code":"","data-quickpaper-b83e9852":""},["var layer=imageObject.layer();"]),a("p",{"data-quickpaper-b83e9852":""},["这里的图层可以类比photoshop的图层去理解，我们提供了几个类似的方法来帮助使用图层对象。"]),a("p",{"data-quickpaper-b83e9852":""},["图层对象管理着图层，通过传递id可以获取对应图层的画笔，如果该图层不存在会自动创建（这里的画笔就是canvas2D画笔）："]),a("pre",{"q-code":"","data-quickpaper-b83e9852":""},["var painter=layer.painter(id);"]),a("p",{"data-quickpaper-b83e9852":""},["删除指定图层："]),a("pre",{"q-code":"","data-quickpaper-b83e9852":""},["layer.delete(id);"]),a("p",{"data-quickpaper-b83e9852":""},["图层中的内容不会显示在画布上，为了显示在画布上，需要手动更新："]),a("pre",{"q-code":"","data-quickpaper-b83e9852":""},["layer.update();"]),a("p",{"data-quickpaper-b83e9852":""},["隐藏图层："]),a("pre",{"q-code":"","data-quickpaper-b83e9852":""},["layer.hidden(id);"]),a("p",{"data-quickpaper-b83e9852":""},["显示图层："]),a("pre",{"q-code":"","data-quickpaper-b83e9852":""},["layer.show(id);"]),a("p",{class:"warn","data-quickpaper-b83e9852":""},["图层的创建越晚离眼睛距离越近。"]),a("h2",{id:"fixed-animation","data-quickpaper-b83e9852":""},["动画或定时轮询"]),a("p",{"data-quickpaper-b83e9852":""},["绘图的时候，为了实现动画效果，你除了可以使用画布或css天然的动画相关属性，还可以使用ES绘制每一帧的方式实现。为了方便你绘制我们提供了下面方法："]),a("pre",{"q-code":"","data-quickpaper-b83e9852":""},["var stop=$$.animation(function(deep){↵    // deep取值0-1，表示动画进度↵}, speeds, function(deep){↵    // deep和上面一样，提供的原因是有时候结束回调是stop方法触发而不是动画结束了↵},timing);"]),a("p",{"data-quickpaper-b83e9852":""},["该方法有四个参数：分别表示画帧方法、动画时长、动画结束回调和进度控制参数（动画时长单位毫秒，最后三个均可选）。"]),a("p",{"data-quickpaper-b83e9852":""},['其中timing可以为字符串或数组，字符串可选参数有："ease"、"ease-in"、"ease-in-out"、"ease-out"和"linear"（默认值），值的意义和css中的属性↵            transition-timing-function 基本一致，数组的话也是和这个属性保持一致，长度为4。']),a("p",{"data-quickpaper-b83e9852":""},["如果你希望动画立刻结束，可以调用下面的方法强行提前停止："]),a("pre",{"q-code":"","data-quickpaper-b83e9852":""},["stop();"]),a("h2",{id:"fixed-colors","data-quickpaper-b83e9852":""},["颜色计算相关方法"]),a("p",{"data-quickpaper-b83e9852":""},["给定任意一个合法的css颜色字符串，把颜色统一转变成rgba格式，返回一个数组[r,g,b,a]："]),a("pre",{"q-code":"","data-quickpaper-b83e9852":""},["var rgbaArray=$$.formatColor(colorString);"]),a("p",{"data-quickpaper-b83e9852":""},["传递需要的颜色个数，返回一组随机色彩："]),a("pre",{"q-code":"","data-quickpaper-b83e9852":""},["// alpha可选，取值是0-1，表示颜色透明度↵var colors=$$.getRandomColors(number, alpha);"]),a("p",{"data-quickpaper-b83e9852":""},["传递需要的颜色个数，返回一组循环色彩："]),a("pre",{"q-code":"","data-quickpaper-b83e9852":""},["// alpha可选，取值是0-1，表示颜色透明度↵var colors=$$.getLoopColors(number, alpha);"]),a("h2",{id:"fixed-ruler","data-quickpaper-b83e9852":""},["刻度尺辅助计算"]),a("div",{"ui-copy":"","data-quickpaper-b83e9852":""},[a("pre",{"q-code":"","data-quickpaper-b83e9852":""},["// 分别表示最大值，最小值和间隔数↵var rulerData = $$.ruler(maxValue, minValue, number);"]),a("p",{"data-quickpaper-b83e9852":""},["返回的数据格式如下："]),a("pre",{"q-code":"","data-quickpaper-b83e9852":""},["rulerData = {↵    min: number, // 最小值↵    max: number , // 最大值↵    distance: number , // 步进↵    num: number // 间隔数↵    ruler: Array<number> // 刻度数数组↵};"]),a("p",{class:"warn","data-quickpaper-b83e9852":""},["温馨提示：传递的间隔数对于最终计算只是作为一个参考，实际的间隔数以返回的结果为准。"])])])])};e.default=t}}]);